# Script de gesti√≥n completa de backups para la Barber√≠a
param(
    [string]$Action = "help",  # help, setup, backup, restore, status, schedule
    [string]$BackupFile = "",
    [switch]$Force
)

$BackupPath = "C:\pgsql-barberias\backups"
$ScriptsPath = Join-Path $PSScriptRoot "docker\backup"

function Show-Help {
    Write-Host @"
üè™ Sistema de Backup - Gesti√≥n de Barber√≠as

Uso: .\backup-manager.ps1 [acci√≥n] [opciones]

Acciones disponibles:
  setup        Configurar backup autom√°tico cada hora
  backup       Crear backup manual inmediato
  restore      Restaurar desde backup m√°s reciente
  status       Ver estado del sistema de backups
  schedule     Administrar programaci√≥n de backups
  help         Mostrar esta ayuda

Opciones:
  -BackupFile  Especificar archivo de backup espec√≠fico para restaurar
  -Force       Forzar operaci√≥n sin confirmaci√≥n

Ejemplos:
  .\backup-manager.ps1 setup                    # Configurar backups autom√°ticos
  .\backup-manager.ps1 backup                   # Crear backup ahora
  .\backup-manager.ps1 restore                  # Restaurar √∫ltimo backup
  .\backup-manager.ps1 restore -BackupFile "barberia_backup_20250724_140000.sql"
  .\backup-manager.ps1 status                   # Ver estado
  .\backup-manager.ps1 schedule                 # Administrar programaci√≥n

"@ -ForegroundColor Cyan
}

function Setup-BackupSystem {
    Write-Host "üöÄ Configurando sistema de backup autom√°tico..." -ForegroundColor Green
    
    # Verificar que los scripts existen
    $schedulerScript = Join-Path $ScriptsPath "backup-scheduler.ps1"
    if (!(Test-Path $schedulerScript)) {
        Write-Host "‚ùå Error: Script de programaci√≥n no encontrado" -ForegroundColor Red
        Write-Host "üìÅ Buscando en: $schedulerScript" -ForegroundColor Yellow
        return
    }
    
    # Ejecutar configuraci√≥n del programador
    & $schedulerScript -Action "start" -BackupPath $BackupPath
    
    Write-Host @"

‚úÖ Sistema de backup configurado exitosamente!

üìÖ Configuraci√≥n:
  ‚Ä¢ Frecuencia: Cada hora
  ‚Ä¢ Directorio: $BackupPath
  ‚Ä¢ Retenci√≥n: 24 backups (√∫ltimas 24 horas)
  ‚Ä¢ Auto-restauraci√≥n: Al iniciar contenedor

üéØ Pr√≥ximos pasos:
  ‚Ä¢ Los backups se crear√°n autom√°ticamente cada hora
  ‚Ä¢ Al reiniciar el contenedor, se restaurar√° el backup m√°s reciente
  ‚Ä¢ Use '.\backup-manager.ps1 status' para monitorear

"@ -ForegroundColor Green
}

function Create-ManualBackup {
    Write-Host "üíæ Creando backup manual..." -ForegroundColor Yellow
    
    $backupScript = Join-Path $ScriptsPath "create-backup.ps1"
    if (!(Test-Path $backupScript)) {
        Write-Host "‚ùå Error: Script de backup no encontrado" -ForegroundColor Red
        return
    }
    
    & $backupScript -BackupPath $BackupPath
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Backup manual completado" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Error en backup manual" -ForegroundColor Red
    }
}

function Restore-FromBackup {
    Write-Host "üì• Iniciando restauraci√≥n..." -ForegroundColor Yellow
    
    $restoreScript = Join-Path $ScriptsPath "restore-backup.ps1"
    if (!(Test-Path $restoreScript)) {
        Write-Host "‚ùå Error: Script de restauraci√≥n no encontrado" -ForegroundColor Red
        return
    }
    
    if ($BackupFile) {
        & $restoreScript -BackupPath $BackupPath -BackupFile $BackupFile -Force:$Force
    } else {
        & $restoreScript -BackupPath $BackupPath -Force:$Force
    }
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Restauraci√≥n completada" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Error en restauraci√≥n" -ForegroundColor Red
    }
}

function Show-BackupStatus {
    Write-Host "üìä Estado del Sistema de Backup" -ForegroundColor Cyan
    Write-Host "================================" -ForegroundColor Cyan
    
    $schedulerScript = Join-Path $ScriptsPath "backup-scheduler.ps1"
    if (Test-Path $schedulerScript) {
        & $schedulerScript -Action "status" -BackupPath $BackupPath
    } else {
        Write-Host "‚ùå Scripts de backup no encontrados" -ForegroundColor Red
        Write-Host "üìÅ Ejecute 'setup' para configurar el sistema" -ForegroundColor Yellow
    }
    
    # Informaci√≥n adicional del contenedor
    Write-Host "`nüê≥ Estado del contenedor PostgreSQL:" -ForegroundColor Cyan
    $containerStatus = docker ps --filter "name=barberia-postgres-standalone" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    if ($containerStatus) {
        Write-Host $containerStatus -ForegroundColor Green
    } else {
        Write-Host "‚ùå Contenedor PostgreSQL no est√° ejecut√°ndose" -ForegroundColor Red
    }
}

function Manage-Schedule {
    Write-Host "üìÖ Gesti√≥n de Programaci√≥n de Backups" -ForegroundColor Cyan
    Write-Host "=====================================" -ForegroundColor Cyan
    
    $schedulerScript = Join-Path $ScriptsPath "backup-scheduler.ps1"
    if (!(Test-Path $schedulerScript)) {
        Write-Host "‚ùå Error: Script de programaci√≥n no encontrado" -ForegroundColor Red
        return
    }
    
    Write-Host "Opciones disponibles:"
    Write-Host "1. Iniciar programaci√≥n autom√°tica"
    Write-Host "2. Detener programaci√≥n autom√°tica"
    Write-Host "3. Ver estado actual"
    Write-Host "4. Salir"
    
    $choice = Read-Host "`nSeleccione una opci√≥n (1-4)"
    
    switch ($choice) {
        "1" { 
            & $schedulerScript -Action "start" -BackupPath $BackupPath
            Write-Host "‚úÖ Programaci√≥n iniciada" -ForegroundColor Green
        }
        "2" { 
            & $schedulerScript -Action "stop" -BackupPath $BackupPath
            Write-Host "‚úÖ Programaci√≥n detenida" -ForegroundColor Green
        }
        "3" { 
            & $schedulerScript -Action "status" -BackupPath $BackupPath
        }
        "4" { 
            Write-Host "üëã Saliendo..." -ForegroundColor Yellow
        }
        default { 
            Write-Host "‚ùå Opci√≥n no v√°lida" -ForegroundColor Red
        }
    }
}

# Funci√≥n principal
switch ($Action.ToLower()) {
    "setup" { Setup-BackupSystem }
    "backup" { Create-ManualBackup }
    "restore" { Restore-FromBackup }
    "status" { Show-BackupStatus }
    "schedule" { Manage-Schedule }
    "help" { Show-Help }
    default { 
        Write-Host "‚ùå Acci√≥n no v√°lida: $Action" -ForegroundColor Red
        Show-Help
    }
}
